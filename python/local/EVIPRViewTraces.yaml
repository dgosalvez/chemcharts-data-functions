id: 45c4c595-281d-a218-e5f3-78a35e87c80d
name: EVIPR View Traces
description: Unpacks raw .evpr files and displays traces
category: Vertex
version: 0.0.1
serviceName: Script
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: vp3Files
    label: Select column with file paths to process
    type: columnselect
    multi: !!bool false
    tooltip: Column should hold a list of .evpr file paths
    validationRules:
    - type: required
      message: ''
    filters:
    - dataType: string
      contentType: []
  request:
    id: vp3Files
    dataType: string
    selectorType: column
- control:
    id: vp3FileNames
    label: Select column with file names to process
    type: columnselect
    multi: !!bool false
    validationRules:
    - type: required
      message: ''
  request:
    id: vp3FileNames
    dataType: string
    selectorType: column
- control:
    id: scaleReferenceWellType
    label: Scale Reference Well Type
    type: text
    validationRules:
    - type: required
      message: ''
  request:
    id: scaleReferenceWellType
    dataType: string
    data: Stimulator Control
- control:
    id: centralReferenceWellType
    label: Central Reference Well Type
    type: text
    validationRules:
    - type: required
      message: ''
  request:
    id: centralReferenceWellType
    dataType: string
    data: Neutral Control
- control:
    id: peakRegions
    label: Peak Regions
    type: textarea
    validationRules:
    - type: required
      message: ''
  request:
    id: peakRegions
    dataType: string
    data: "{'R1':(19,79,'AVG'),'R2':(89,109,'MAX'),'R3':(119,129,'MAX'),'R4':(139,149 ,'MAX'),'R5':(159,169,'MAX'),'R6':(179,189,'MAX')}"
- control:
    id: peakCountNormalizationRegion
    label: Normalization Region
    type: text
    validationRules:
    - type: required
      message: ''
  request:
    id: peakCountNormalizationRegion
    dataType: string
    data: R1
- control:
    id: thresholdComputationRegion
    label: Threshold Computation Region
    type: text
    validationRules:
    - type: required
      message: ''
  request:
    id: thresholdComputationRegion
    dataType: string
    data: R2
- control:
    id: threshold_val
    label: Threshold
    type: text
    validationRules:
    - type: required
      message: ''
    - type: numeric
      message: ''
  request:
    id: threshold_val
    dataType: integer
    data: !!int 50
- control:
    id: differenceMethod
    label: Use Difference Method
    type: checkbox
  request:
    id: differenceMethod
    dataType: boolean
    data: !!bool true
- control:
    id: differenceMethodType
    label: Difference Method
    type: select
    multi: !!bool false
    options:
    - text: Pre
      value: pre
    validationRules:
    - type: required
      message: ''
  request:
    id: differenceMethodType
    dataType: string
    data: pre
- control:
    id: differenceMethodCalculation
    label: Method
    type: select
    multi: !!bool false
    options:
    - text: AVG
      value: AVG
    - text: MEAN
      value: MEAN
    - text: Geometric Mean
      value: GEO
    validationRules:
    - type: required
      message: ''
  request:
    id: differenceMethodCalculation
    dataType: string
    data: AVG
- control:
    id: differenceMethodNumPoints
    label: '# Points'
    type: text
    validationRules:
    - type: required
      message: ''
  request:
    id: differenceMethodNumPoints
    dataType: integer
    data: !!int 20
tags:
- color: '#dddddd'
  text: Vertex
ironPython: |
  import clr
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application.Visuals import ScatterPlot, LineChart, TrellisMode, IndividualScalingMode, AxisRange, \
      MarkerClass
  from System.Drawing import *  # Color
  from System import *  # ColorTranslator
  from System import *  # Collections
  from System import AppDomain

  for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name == 'Charts':
          clr.AddReference(asm.FullName)

  from Charts import ChartsModel

  model_type = ChartsModel

  # tableId pass in args
  dataTables = ResultTables
  #dataTables = Document.Data.Tables
  tableNames = ['Trace KB_BC_VV368247', 'Count KB_BC_VV368247', 'Trace KB_BC_VV357314', 'Count KB_BC_VV357314']

  r = 0
  for dataTable in dataTables:
      r += 1
      #if r > 1 and r % 2 == 0:
      if r % 2 != 0:
          if not dataTable:
              raise Exception('target table not found')

          page = Document.Pages.AddNew(tableNames[r - 1])
          panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

          for panel in page.Panels:
              if panel.TypeId in panelsToHide:
                  if panel.Visible:
                      panel.Visible = False

          filteringScheme = Document.FilteringSchemes[0]
          page.FilterPanel.FilteringSchemeReference = filteringScheme

          # add and configure LineChart
          lineChart = page.Visuals.AddNew[LineChart]()
          lineChart.Title = "EVIPR Normal Ratio " + tableNames[r - 1]
          lineChart.Data.DataTableReference = dataTable
          lineChart.XAxis.Expression = '<' + 'baserowid()' + '>'
          lineChart.XAxis.ManualZoom = True
          lineChart.XAxis.Scale.ShowGridlines = False
          lineChart.XAxis.Scale.ShowLabels = False
          lineChart.XAxis.ShowAxisSelector = False

          # build YAxis expression
          lineChart.YAxis.Expression = '[Normal Ratio]'
          lineChart.Trellis.TrellisMode = TrellisMode.Panels
          lineChart.Trellis.PanelAxis.Expression = '<[Well Label]>'
          lineChart.Trellis.ManualLayout = True
          lineChart.Trellis.ManualColumnCount = 24
          lineChart.Trellis.ManualRowCount = 16
          lineChart.YAxis.IndividualScaling = False
          lineChart.YAxis.IndividualScalingMode = IndividualScalingMode.Trellis
          # lineChart.YAxis.Range = AxisRange(0.85, 1.4)
          lineChart.YAxis.ShowAxisSelector = False
          color = ColorTranslator.FromHtml("#0eff00")
          lineChart.ColorAxis.Coloring.DefaultColor = color

          well_order = Collections.Generic.List[str](
              ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16",
               "A17", "A18", "A19", "A20", "A21", "A22", "A23", "A24", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8",
               "B9", "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B17", "B18", "B19", "B20", "B21", "B22", "B23",
               "B24", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "C13", "C14", "C15",
               "C16", "C17", "C18", "C19", "C20", "C21", "C22", "C23", "C24", "D1", "D2", "D3", "D4", "D5", "D6", "D7",
               "D8", "D9", "D10", "D11", "D12", "D13", "D14", "D15", "D16", "D17", "D18", "D19", "D20", "D21", "D22",
               "D23", "D24", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12", "E13", "E14",
               "E15", "E16", "E17", "E18", "E19", "E20", "E21", "E22", "E23", "E24", "F1", "F2", "F3", "F4", "F5", "F6",
               "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21",
               "F22", "F23", "F24", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10", "G11", "G12", "G13",
               "G14", "G15", "G16", "G17", "G18", "G19", "G20", "G21", "G22", "G23", "G24", "H1", "H2", "H3", "H4", "H5",
               "H6", "H7", "H8", "H9", "H10", "H11", "H12", "H13", "H14", "H15", "H16", "H17", "H18", "H19", "H20", "H21",
               "H22", "H23", "H24", "I1", "I2", "I3", "I4", "I5", "I6", "I7", "I8", "I9", "I10", "I11", "I12", "I13",
               "I14", "I15", "I16", "I17", "I18", "I19", "I20", "I21", "I22", "I23", "I24", "J1", "J2", "J3", "J4", "J5",
               "J6", "J7", "J8", "J9", "J10", "J11", "J12", "J13", "J14", "J15", "J16", "J17", "J18", "J19", "J20", "J21",
               "J22", "J23", "J24", "K1", "K2", "K3", "K4", "K5", "K6", "K7", "K8", "K9", "K10", "K11", "K12", "K13",
               "K14", "K15", "K16", "K17", "K18", "K19", "K20", "K21", "K22", "K23", "K24", "L1", "L2", "L3", "L4", "L5",
               "L6", "L7", "L8", "L9", "L10", "L11", "L12", "L13", "L14", "L15", "L16", "L17", "L18", "L19", "L20", "L21",
               "L22", "L23", "L24", "M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12", "M13",
               "M14", "M15", "M16", "M17", "M18", "M19", "M20", "M21", "M22", "M23", "M24", "N1", "N2", "N3", "N4", "N5",
               "N6", "N7", "N8", "N9", "N10", "N11", "N12", "N13", "N14", "N15", "N16", "N17", "N18", "N19", "N20", "N21",
               "N22", "N23", "N24", "O1", "O2", "O3", "O4", "O5", "O6", "O7", "O8", "O9", "O10", "O11", "O12", "O13",
               "O14", "O15", "O16", "O17", "O18", "O19", "O20", "O21", "O22", "O23", "O24", "P1", "P2", "P3", "P4", "P5",
               "P6", "P7", "P8", "P9", "P10", "P11", "P12", "P13", "P14", "P15", "P16", "P17", "P18", "P19", "P20", "P21",
               "P22", "P23", "P24"])
          dataTable.Columns["Well Label"].Properties.SetCustomSortOrder(well_order)
          for i in lineChart.Legend.Items:
              if i.Title == "Data table":
                  i.Visible = True
                  i.ShowTitle = True
              else:
                  i.Visible = False  # Hide any legend items not caught above

          page.AutoConfigure()

  # dataTable2 = ResultTables[1]
  # dataTable2 = Document.Data.Tables.Item['Script Output Table (2)']
  r = 0
  for dataTable2 in dataTables:
      r += 1
      #if r > 1 and r % 2 != 0:
      if r % 2 == 0:
          if not dataTable2:
              raise Exception('target table not found')

          page2 = Document.Pages.AddNew(tableNames[r - 1])
          panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

          for panel in page2.Panels:
              if panel.TypeId in panelsToHide:
                  if panel.Visible:
                      panel.Visible = False

          filteringScheme = Document.FilteringSchemes[0]
          page2.FilterPanel.FilteringSchemeReference = filteringScheme

          # add and configure LineChart
          sp = page2.Visuals.AddNew[ScatterPlot]()
          sp.Title = "EVIPR Peak " + tableNames[r - 1]
          sp.Data.DataTableReference = dataTable2
          sp.XAxis.Expression = '[Row]'

          # build YAxis expression
          sp.YAxis.Expression = '[Row (2)]'

          sp.MarkerClass = MarkerClass().Tile
          sp.ColorAxis.Expression = "<[Raw Counts]>"
          page2.AutoConfigure()

  Document.ActivePageReference = Document.Pages[2]
allowedClients:
- Analyst
- WebPlayer
demoUrl: 
limitBy: none
