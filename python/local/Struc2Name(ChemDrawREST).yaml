id: 4c2e4f5c-25a6-88b5-ec17-99d64c10a836
name: Struc2Name (ChemDraw REST)
description: Calculates IUPAC name using python to call to ChemDraw REST API
category: Chemistry
version: 1.0.0
serviceName: Script
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: structureColumn
    label: Select structure column
    type: columnselect
    filters:
    - dataType: string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-smiles
      - chemical/x-daylight-smiles
    - dataType: binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    validationRules:
    - type: required
      message: Must select column of 2D structures
  request:
    id: structureColumn
    dataType: string
    selectorType: column
tags:
- color: '#50AF28'
  text: chemistry
- color: '#36a832'
  text: ChemDraw REST
updateBehavior: automatic
maximumOutputColumns: !!int 1
maximumOutputTables: !!int 0
chemistryFunction: !!bool false
script: |
  import json
  import requests
  from df.chem_helper import column_to_molecules
  from df.data_transfer import DataFunctionRequest, DataFunctionResponse, DataType, ColumnData, \
      string_input_field
  from rdkit import Chem

  RESTPayload = {'chemDataType': 'chemical/x-molfile'}
  headers = {'Content-type': 'application/json'}


  def execute(request: DataFunctionRequest) -> DataFunctionResponse:
      column_id = string_input_field(request, 'structureColumn')
      molecules = column_to_molecules(request.inputColumns[column_id])
      weights = [None if m is None else get_name(m) for m in molecules]
      output_column = ColumnData(name=f'{input_column.name} Exact Mass', dataType=DataType.DOUBLE, values=weights)
      response = DataFunctionResponse(outputColumns=[output_column])

      return response


  def get_name(m) -> float:
      RESTPayload['chemData'] = Chem.MolToMolBlock(m)
      # print(json.dumps(RESTPayload))
      response = requests.post("https://chemdrawdirect.perkinelmer.cloud/rest/toName"
                               , data=json.dumps(RESTPayload)
                               , headers=headers)
      name = response.text
      return name
outputFields:
- id: structureColumn
  source: inputField
  type: default
  name: Structure column
- id: column1
  source: column
  type: filter
  name: Output molecule name column
allowedClients:
- Analyst
- WebPlayer
demoUrl: 
limitBy: both
